package ca.uwaterloo.lab4_204_46;

import java.util.ArrayList;
import java.util.HashMap;

import android.graphics.PointF;
import mapper.FloatHelper;

public class RouteFinder {
	
	static public boolean checkArrive(PointF p1, PointF p2) {
		return FloatHelper.distance(p1, p2) <= 1;
	}
	
	static public GraphNode findNode(ArrayList<GraphNode> graph, PointF p) {
		GraphNode result = null;
		for (GraphNode v : graph) {
			if (v.getPos().equals(p.x, p.y)) {
				result = v;
				break;
			}
		}
		return result;
	}
	
	static public void cleanGraph(ArrayList<GraphNode> graph, PointF p)  {
		if (p != null) {
			GraphNode v = null;
			for (int i = 0; i < graph.size(); i++) {
				if (graph.get(i).getPos().x == p.x && graph.get(i).getPos().y == p.y) {
					v = graph.get(i);
				}
			}
			for (int i = 0; i < graph.size(); i++) {
				v.removeNeighbour(graph.get(i));
				graph.get(i).removeNeighbour(v);
			}
			graph.remove(v);
		}
	}

//	static public void cleanGraph(ArrayList<GraphNode> graph, GraphNode v)  {
//		for (int i = 0; i < graph.size(); i++) {
//			graph.get(i).removeNeighbour(v);
//			v.removeNeighbour(graph.get(i));
//        }
//		graph.remove(v);
//	}
	
	static public GraphNode addNode(ArrayList<GraphNode> graph, PointF p) {
		GraphNode v = new GraphNode(p); graph.add(graph.size(), v);
		if (p.x < 5 && p.y > 19) {
            graph.get(0).getNeighbours().add(v);
            v.addNeighbour(graph.get(0));
        }
        else if (p.x > 3.5f && p.x < 7.5f && p.y < 17.5f) {
            graph.get(1).getNeighbours().add(v);
            v.addNeighbour(graph.get(1));
        }
        else if (p.x > 10.5f && p.x < 14.5f && p.y < 17.5f) {
            graph.get(2).getNeighbours().add(v);
            v.addNeighbour(graph.get(2));
        }
        else if (p.y > 17.5f && p.y < 19) {
            graph.get(0).getNeighbours().add(v); graph.get(1).getNeighbours().add(v);
            graph.get(2).getNeighbours().add(v); graph.get(3).getNeighbours().add(v);
            v.addNeighbour(graph.get(0)); v.addNeighbour(graph.get(1));
            v.addNeighbour(graph.get(2)); v.addNeighbour(graph.get(3));
        }
        else if (p.x > 17.75f && p.x < 22.75f && p.y < 20) {
            graph.get(3).getNeighbours().add(v);
            v.addNeighbour(graph.get(3));
        }
        else if (p.x > 22.75f && p.y < 7) {
            graph.get(4).getNeighbours().add(v);
            v.addNeighbour(graph.get(4));
        }
        else if (p.x > 22.75f && p.y > 19) {
            graph.get(5).getNeighbours().add(v);
            v.addNeighbour(graph.get(5));
        }
        else if (p.x > 19.5 && p.y > 20) {
            graph.get(5).getNeighbours().add(v);
            v.addNeighbour(graph.get(5));
        }
        return v;
	}
	
	static public GraphNode min(ArrayList<GraphNode> Q, HashMap<GraphNode, Double> dist) {
		GraphNode result = Q.get(0);
		Double min = dist.get(result);
		for (int i = 0; i < Q.size(); i++) {
			GraphNode v = Q.get(i);
			if (dist.get(v) < min) {
				result = v;
				min = dist.get(result);
			}
		}
		return result;
	}
	
	static public ArrayList<GraphNode> findRoute(ArrayList<GraphNode> graph, GraphNode start, GraphNode end) {
		ArrayList<GraphNode> path = new ArrayList<GraphNode>();
		ArrayList<GraphNode> unvisited = new ArrayList<GraphNode>();
		HashMap<GraphNode, GraphNode> previous = new HashMap<GraphNode, GraphNode>();
		HashMap<GraphNode, Double> distance = new  HashMap<GraphNode, Double>();
		for (int i = 0; i < graph.size(); i++) {
			GraphNode v = graph.get(i);
			unvisited.add(i, v);
			previous.put(v, null);
			distance.put(v, Double.POSITIVE_INFINITY);
		}
		distance.put(start, 0.0);
		while (unvisited.size() != 0) {
			GraphNode u = min(unvisited, distance);
			if (u != end) {
				unvisited.remove(u);
				for (GraphNode v : u.getNeighbours()) {
					Double alt = distance.get(u) + FloatHelper.distance(u.getPos(), v.getPos());
					if (alt < distance.get(v)) {
						distance.put(v, alt);
						previous.put(v, u);
					}
				}
			}
			else {
				break;
			}
		}
		GraphNode u = end;
		int count = 0;
		while (previous.get(u) != null) {
			path.add(count, u);
			u = previous.get(u);
			count++;
		}
		path.add(count, u);
		return path;
	}
}
